import pandas as pd
import os
import saspy

# starting sas session
sas = saspy.SASsession(
# own pathway to your Java 7 or 8 file on
java='C:\\Program Files (x86)\\Java\\jre-1.8\\bin\\java.exe',
#European Home Region 1
iomhost=['odaws01-euw1.oda.sas.com','odaws02-euw1.oda.sas.com'],
iomport= 8591,
authkey= 'oda',
encoding ='utf-8')
sas

#sas code to run
mixed_model_code = """ 
proc mixed data=df_sas;
class Date weekday downseason;
model laeq=night_hour  night_hour_sq night_hour_cu 
downseason*weekday night_hour*downseason*weekday night_hour_sq*downseason*weekday night_hour_cu*downseason*weekday
LC_HUMIDITY night_hour*LC_HUMIDITY night_hour_sq*LC_HUMIDITY night_hour_cu*LC_HUMIDITY
LC_DWPTEMP night_hour*LC_DWPTEMP night_hour_sq*LC_DWPTEMP night_hour_cu*LC_DWPTEMP
LC_WINDSPEED night_hour*LC_WINDSPEED night_hour_sq*LC_WINDSPEED night_hour_cu*LC_WINDSPEED
Total_Event_Score night_hour*Total_Event_Score night_hour_sq*Total_Event_Score night_hour_cu*Total_Event_Score
/ solution;

random intercept night_hour night_hour_sq/ subject=Date type=un; 
ods output solutionf = fixed_out; 
run; 

"""
#create directory if necessary
path = "./Predictions/Estimates/"
    # check if the directory exists; if not create it
if os.path.isdir(path) == False:
    os.mkdir(path)

#loop over all training files
for filename in os.listdir("./Dataset/train/"):
    if filename == 'train_night_hears.csv':
        print('Skipping hears dataset')
    else:
        print("Working on" +filename)
        csv_train = os.path.join("Dataset/train/", filename)
        # checking if it is a file
        if os.path.isfile(csv_train):
            df = pd.read_csv(csv_train)
            # create sas table named 'df_sas'
            python_object = sas.df2sd(df, 'df_sas', libref='WORK')
            #run the sas code 
            model_out = sas.submit(mixed_model_code)
            print(model_out['LOG'])
            #retrieve solution of fixed effects
            fixed_df = sas.sasdata('fixed_out').to_df()
            fixed_df.to_csv(f"Predictions/Estimates/estimates_{filename}")
            
#close sas connection
sas.endsas

# In the folder "Extra" an example of the table 'fixed_out' generated by SAS is given to better understand the underlying formula for calculating the predictions.
def Predictions(est, df):
    # Prediction for continuous variables and reference for weekday*downseason (Wednesday * 1)
    y_pred = (
        # intercept  hour  hour² hour³
        est[0] + est[1] *df["night_hour"] + est[2] *df["night_hour_sq"] + est[3] *df["night_hour_cu"]
        # humidity
        + (est[60] + est[61] *df["night_hour"] + est[62] *df["night_hour_sq"] + est[63] *df["night_hour_cu"]) *df["LC_HUMIDITY"]
        # temperature
        + (est[64] + est[65] *df["night_hour"] + est[66] *df["night_hour_sq"] + est[67] *df["night_hour_cu"]) *df["LC_DWPTEMP"]
        # windspeed
        + (est[68] + est[69] *df["night_hour"] + est[70] *df["night_hour_sq"] + est[71] *df["night_hour_cu"]) *df["LC_WINDSPEED"]
        # Total_Event_Scores
        + (est[72] + est[73] *df["night_hour"] + est[74] *df["night_hour_sq"] + est[75] *df["night_hour_cu"]) *df["Total_Event_Score"]
        )
    
    # add effects for weekday*downseason
    for index, row in df.iterrows():
        if row["weekday"] == "Wednesday":
            if row["downseason"] == 1: 
                # wednesday and downseaons = 1 --> reference categorie
                y_pred[index] = y_pred[index] 
            else:
                # wednesday and downseason = 0
                y_pred[index] = (y_pred[index] + est[16] + est[30]*row["night_hour"] + est[44]*row["night_hour_sq"] + est[58]*row["night_hour_cu"])
    
        elif row["weekday"] == "Friday":
            if row["downseason"] == 1:
                # friday and downseason = 1
                y_pred[index] = y_pred[index] + est[5] + est[19]*row["night_hour"] + est[33]*row["night_hour_sq"] + est[47]*row["night_hour_cu"] 
            else:
                # friday and downseason = 0
                y_pred[index] = y_pred[index] + est[4] + est[18]*row["night_hour"] + est[32]*row["night_hour_sq"] + est[46]*row["night_hour_cu"] 
        
        elif row["weekday"] == "Monday":
            if row["downseason"] == 1:
                # monday and downseason = 1
                y_pred[index] = y_pred[index] + est[7] + est[21]*row["night_hour"] + est[35]*row["night_hour_sq"] + est[49]*row["night_hour_cu"]  
            else:
                # monday and downseason = 0
                y_pred[index] = y_pred[index] + est[6] + est[20]*row["night_hour"] + est[34]*row["night_hour_sq"] + est[48]*row["night_hour_cu"]  
    
        elif row["weekday"] == "Saturday":    
            if row["downseason"] == 1:
                #saturday and downseason = 1
                y_pred[index] = y_pred[index] + est[9] + est[23]*row["night_hour"] + est[37]*row["night_hour_sq"] + est[51]*row["night_hour_cu"]  
            else:
                # saturday and downseason = 0
                y_pred[index] = y_pred[index] + est[8] + est[22]*row["night_hour"] + est[36]*row["night_hour_sq"] + est[50]*row["night_hour_cu"]  
    
        elif row["weekday"] == "Sunday":
            if row["downseason"] == 1:
                # sunday and downseason = 1
                y_pred[index] = y_pred[index] + est[11] + est[25]*row["night_hour"] + est[39]*row["night_hour_sq"] + est[53]*row["night_hour_cu"]   
            else:
                y_pred[index] = y_pred[index] + est[10] + est[24]*row["night_hour"] + est[38]*row["night_hour_sq"] + est[52]*row["night_hour_cu"]   
    
        elif row["weekday"] == "Thursday":
            if row["downseason"] == 1:
                # Thursday and dowseason = 1
                y_pred[index] = y_pred[index] + est[13] + est[27]*row["night_hour"] + est[41]*row["night_hour_sq"] + est[55]*row["night_hour_cu"]    
            else:
                # Thursday and dowseason = 0
                y_pred[index] = y_pred[index] + est[12] + est[26]*row["night_hour"] + est[40]*row["night_hour_sq"] + est[54]*row["night_hour_cu"] 
        
        elif row["weekday"] == "Tuesday":
            if row["downseason"] == 1:
                # Tuesday and downseason = 1
                y_pred[index] = y_pred[index] + est[15] + est[29]*row["night_hour"] + est[43]*row["night_hour_sq"] + est[57]*row["night_hour_cu"] 
            else:
                # Tuesday and downseason = 0
                y_pred[index] = y_pred[index] + est[14] + est[28]*row["night_hour"] + est[42]*row["night_hour_sq"] + est[56]*row["night_hour_cu"]
    
    return y_pred



if os.path.isdir("Predictions/Predictions/") == False:
    os.mkdir("Predictions/Predictions/")

#Delete test_night_hears file if still exists
if os.path.isfile("Dataset/test/test_night_hears.csv"):
    os.remove("Dataset/test/test_night_hears.csv")
    
Pred = os.listdir("Predictions/Estimates/")
Test = os.listdir("Dataset/test/")

# Iterate over the corresponding pairs of files
for pred_file, test_file in zip(Pred, Test):
    print("Working on " + test_file)
    csv_pred = os.path.join("Predictions/Estimates/", pred_file)
    csv_test = os.path.join("Dataset/test/", test_file)
        
    estimates = pd.read_csv(csv_pred) 
    est = estimates["Estimate"]
    df = pd.read_csv(csv_test)
    y_pred = Predictions(est, df)
        
    # Assign a name to y_pred Series
    y_pred.name = "y_pred"
    # Merge DataFrame with y_pred based on index
    df_y_pred = pd.merge(df, y_pred, left_index=True, right_index=True)
    
    # Save the merged DataFrame to a new file
    output_file = f"Predictions/Predictions/y_pred_{test_file}"
    df_y_pred.to_csv(output_file)
    print("Saved merged predictions to " + output_file)
